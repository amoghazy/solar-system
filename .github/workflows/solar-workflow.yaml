name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - "feat/*"
env:
  MONGO_URI: ${{ vars.MONGOOSE_URI }}
  MONGO_USERNAME: ${{ vars.MONGOOSE_USER }}
  MONGO_PASSWORD: ${{ secrets.MONGOOSE_PASS }}
jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    container: node:20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: unit-testing
        run: |
          npm test
          ls -al

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container: node:20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        run: npm install
      - name: Code Coverage
        continue-on-error: true

        run: npm run coverage

      - name: Archive Coverage Result
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Test-Result
          path: coverage
  docker:
    name: Docker
    permissions:
      packages: write
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: ${{ vars.DOCKER_USER }}/solar-system:${{ github.sha }}
          context: .

      - name: Test Docker Image
        run: |
          docker images
          docker run --name solar-system-test -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKER_USER }}/solar-system:${{ github.sha }}
          echo "Waiting for the container to start..."
          docker container ls
          docker exec solar-system-test echo "Waiting for the container to start..."
          docker container logs solar-system-test
          wget -q -O -  http://localhost:3000/live | grep "live"

      - name: Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKER_USER }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
          context: .
  deploy:
    name: Dev-Deploy
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v4
        name: Setup KubeCtl
        id: install
      - uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: fetch k8s details
        run: |

          kubectl get nodes
      # - name: save INGRESS_IP
      #   run: |
      #     INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      #     echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
      # - uses: cschleiden/replace-tokens@v1
      #   with:
      #     tokenPrefix: "_{_"
      #     tokenSuffix: "_}_"
      #     files: '["kubernetes/development/*"]'
      #   env:
      #     NAMESPACE: ${{ vars.NAMESPACE }}
      #     INGRESS_IP: ${{ env.INGRESS_IP }}
      #     REPLICAS: ${{ vars.REPLICAS }}
      #     IMAGE: ${{ vars.DOCKER_USER }}/solar-system:${{ github.sha }}
      # - name: check files
      #   run: |
      #     cat kubernetes/development/*.yaml
      # - name: create Mongo-secret
      #   run: |
      #     kubectl create secret generic mongo-db-creds -n ${{ vars.NAMESPACE }} \
      #     --from-literal=MONGO_URI=$MONGO_URI \
      #      --from-literal=MONGO_USERNAME=$MONGO_USERNAME \
      #      --from-literal=MONGO_PASSWORD=$MONGO_PASSWORD \
      #      --save-config \
      #      --dry-run=client -o yaml | kubectl apply -f -
      # - name: apply deployment to development namespace
      #   run: |
      #     kubectl apply -f kubernetes/development -n ${{ vars.NAMESPACE }}
      
